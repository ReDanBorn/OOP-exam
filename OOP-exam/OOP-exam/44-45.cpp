//-----------------------------------------------------------КОНСТРУКТОРЫ-------------------------------------------------------
//#include <iostream>
//using namespace std;
//
//class Point //Класс = шаблон
//{
//private:
//	int x;
//	int y;
//
//public:
//	//-------------------Пример конструктора по умолчанию
//	Point()
//	{
//		x = 0;
//		y = 0;
//	}
//	//-------------------Пример конструктора по умолчанию
//	//-------------------Пример перегрузки конструктора
//	Point(int valueX, int valueY) //Конструктор класса (функция, которая не возвращает значения) помогает инициализировать объекты так, чтобы они подходили по всем переменным для работы функций класса.
//	{
//		x = valueX; //Конструктор заменяет функции SetX и SetY
//		y = valueY;
//	}
//	//-------------------Пример перегрузки конструктора
//	//-------------------Пример перегрузки конструктора
//	Point(int X, bool boolean)
//	{
//		x = X;
//		if (boolean)
//		{
//			y = 2;
//		}
//		else
//		{
//			y = -1;
//		}
//	}
//	//-------------------Пример перегрузки конструктора
//	int GetX()
//	{
//		return x;
//	}
//	int GetY()
//	{
//		return y;
//	}
//	//void SetX(int valueX)
//	//{
//	//	x = valueX;
//	//}
//	//void SetY(int valueY)
//	//{
//	//	y = valueY;
//	//}
//	void Print() //Метод вывода данных в консоль
//	{
//		cout << "X = " << x << "\t Y = " << y << endl << endl;
//	}
//};
//
//int main()
//{
//	system("chcp 1251");
//	Point p;
//
//	p.Print();
//
//	Point p2(17, 28);
//
//	p2.Print();
//
//	Point p3(15, false);
//
//	p3.Print();
//
//	return 0;
//}

//-----------------------------------------------------------КОНСТРУКТОРЫ-------------------------------------------------------
//------------------------------------------------------------ДЕСТРУКТОРЫ-------------------------------------------------------
//#include <iostream>
//using namespace std;
//
//class MyClass //Класс = шаблон
//{
//private:
//	int data; //Статическая переменная в памяти
//	int* data2; //Динамическая переменная в памяти
//public:
//	MyClass(int value, int size)
//	{
//		data = value;
//		data2 = new int[size];
//		for (int i = 0; i < size; i++)
//		{
//			data2[i] = i;
//		}
//		cout << "Объект " << data2 << "Вызвался конструктор" << endl;
//	}
//
//	~MyClass() // ~Деструктор (Может быть всего 1 деструктор на класс)(Деструктор не может принимать параметров)
//	{
//		delete[] data2;
//		cout << "Объект " << data2 << "Вызвался деструктор" << endl;
//	}
//};
//
//void Test()
//{
//	cout << "Test начало выполнения" << endl;
//	MyClass a(10, 1);
//	cout << "Test начало выполнения" << endl;
//}
//
//int main()
//{
//	system("chcp 1251");
//	setlocale(LC_ALL, "ru");
//	Test();
//	MyClass a(25, 2);
//
//	MyClass b(35, 3);
//	return 0;
//}
//------------------------------------------------------------ДЕСТРУКТОРЫ-------------------------------------------------------
//------------------------------------------------------КОНСТРУКТОРЫ КОПИРОВАНИЯ------------------------------------------------
#include <iostream>
using namespace std;

class MyClass
{
private:
	int* data;
	int Size;
public:
	MyClass(int size)
	{
		this->Size = size;
		this->data = new int[size];
		for (int i = 0; i < size; i++)
		{
			data[i] = i;
		}
		cout << "Вызвался конструктор " << this << endl;
	}

	~MyClass() // ~Деструктор (Может быть всего 1 деструктор на класс)(Деструктор не может принимать параметров)
	{
		cout << "Вызвался деструктор " << this << endl;
		delete[] data;
	}

	MyClass(const MyClass& other) //НОВЫЙ КОНСТРУКТОР КОПИРОВАНИЯ (ЗАМЕНЯЕТ КОНСТРУКТОРЫ КОПИРОВАНИЯ ОТ КОМПИЛЯТОРА)
	{
		//this->data = other.data; //Возникает ошибка двойного затирания области

		this->Size = other.Size;
		this->data = new int[other.Size];
		for (int i = 0; i < other.Size; i++)
		{
			this->data[i] = other.data[i];
		}
		cout << "Вызвался конструктор копирования " << this << endl;
	}
};

void Test(MyClass value/*Конструктор копирования 2 от компилятора*/) //MyClass value - в данном случае является конструктором копирования и создаёт ещё 1 объект в данной функции
{
	cout << "Вызвалась функция Test" << endl;
}

int main()
{
	system("chcp 1251");
	setlocale(LC_ALL, "ru");
	MyClass a(25);

	MyClass b(a); //конструктор копирования 1 от компилятора

	//Test(a);
	return 0;
}
//------------------------------------------------------КОНСТРУКТОРЫ КОПИРОВАНИЯ------------------------------------------------